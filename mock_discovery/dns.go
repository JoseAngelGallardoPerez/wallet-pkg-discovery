// Code generated by MockGen. DO NOT EDIT.
// Source: dns.go

// Package mock_discovery is a generated GoMock package.
package mock_discovery

import (
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockSRVResolver is a mock of SRVResolver interface
type MockSRVResolver struct {
	ctrl     *gomock.Controller
	recorder *MockSRVResolverMockRecorder
}

// MockSRVResolverMockRecorder is the mock recorder for MockSRVResolver
type MockSRVResolverMockRecorder struct {
	mock *MockSRVResolver
}

// NewMockSRVResolver creates a new mock instance
func NewMockSRVResolver(ctrl *gomock.Controller) *MockSRVResolver {
	mock := &MockSRVResolver{ctrl: ctrl}
	mock.recorder = &MockSRVResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSRVResolver) EXPECT() *MockSRVResolverMockRecorder {
	return m.recorder
}

// LookupSRV mocks base method
func (m *MockSRVResolver) LookupSRV(service, proto, name string) (string, []*net.SRV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupSRV", service, proto, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]*net.SRV)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupSRV indicates an expected call of LookupSRV
func (mr *MockSRVResolverMockRecorder) LookupSRV(service, proto, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupSRV", reflect.TypeOf((*MockSRVResolver)(nil).LookupSRV), service, proto, name)
}
